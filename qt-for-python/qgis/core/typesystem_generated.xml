<?xml version="1.0" encoding="UTF-8"?>
<typesystem package="core">
    <!--Auto-generated -->
    <primitive-type name="int"/>
    <primitive-type name="unsigned"/>
    <primitive-type name="short"/>
    <primitive-type name="unsigned short"/>
    <primitive-type name="long"/>
    <primitive-type name="unsigned long"/>
    <primitive-type name="float"/>
    <primitive-type name="double"/>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/qgstestutils.h:34 -->
    <namespace-type name="QgsTestUtils">
        <include file-name="qgstestutils.h"/>
    </namespace-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/qgsziputils.h:29 -->
    <namespace-type name="QgsZipUtils">
        <include file-name="qgsziputils.h"/>
    </namespace-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/qgshstoreutils.h:33 -->
    <namespace-type name="QgsHstoreUtils">
        <include file-name="qgshstoreutils.h"/>
    </namespace-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/qgis.h:53 -->
    <value-type name="Qgis">
        <enum-type name="MessageLevel"/>
        <enum-type name="LayerType"/>
        <enum-type name="WkbType"/>
        <enum-type name="GeometryType"/>
        <enum-type name="DataType"/>
        <enum-type name="CaptureTechnique"/>
        <enum-type name="VectorLayerTypeFlag" flags="VectorLayerTypeFlags"/>
        <enum-type name="PythonMacroMode"/>
        <enum-type name="FeatureCountState"/>
        <enum-type name="VectorDataProviderAttributeEditCapability" flags="VectorDataProviderAttributeEditCapabilities"/>
        <enum-type name="SymbolType"/>
        <enum-type name="ScaleMethod"/>
        <enum-type name="SettingsType"/>
        <enum-type name="SettingsTreeNodeType"/>
        <enum-type name="SettingsTreeNodeOption" flags="SettingsTreeNodeOptions"/>
        <enum-type name="SldExportOption" flags="SldExportOptions"/>
        <enum-type name="SldExportVendorExtension"/>
        <enum-type name="SettingsOption" flags="SettingsOptions"/>
        <enum-type name="SnappingMode"/>
        <enum-type name="SnappingType" flags="SnappingTypes"/>
        <enum-type name="SymbolRenderHint" flags="SymbolRenderHints"/>
        <enum-type name="SymbolRotationMode"/>
        <enum-type name="SymbolFlag" flags="SymbolFlags"/>
        <enum-type name="SymbolPreviewFlag" flags="SymbolPreviewFlags"/>
        <enum-type name="SymbolLayerFlag" flags="SymbolLayerFlags"/>
        <enum-type name="SymbolLayerUserFlag" flags="SymbolLayerUserFlags"/>
        <enum-type name="BrowserItemType"/>
        <enum-type name="BrowserItemState"/>
        <enum-type name="BrowserItemCapability" flags="BrowserItemCapabilities"/>
        <enum-type name="BrowserLayerType"/>
        <enum-type name="BrowserDirectoryMonitoring"/>
        <enum-type name="HttpMethod"/>
        <enum-type name="VectorExportResult"/>
        <enum-type name="VectorFileWriterCapability" flags="VectorFileWriterCapabilities"/>
        <enum-type name="SqlLayerDefinitionCapability" flags="SqlLayerDefinitionCapabilities"/>
        <enum-type name="SqlKeywordCategory"/>
        <enum-type name="DriveType"/>
        <enum-type name="ActionStart"/>
        <enum-type name="UnplacedLabelVisibility"/>
        <enum-type name="LabelOverlapHandling"/>
        <enum-type name="LabelPlacement"/>
        <enum-type name="LabelPredefinedPointPosition"/>
        <enum-type name="LabelOffsetType"/>
        <enum-type name="LabelQuadrantPosition"/>
        <enum-type name="LabelLinePlacementFlag" flags="LabelLinePlacementFlags"/>
        <enum-type name="LabelPolygonPlacementFlag" flags="LabelPolygonPlacementFlags"/>
        <enum-type name="UpsideDownLabelHandling"/>
        <enum-type name="LabelMultiLineAlignment"/>
        <enum-type name="FileFilterType"/>
        <enum-type name="SublayerQueryFlag" flags="SublayerQueryFlags"/>
        <enum-type name="SublayerFlag" flags="SublayerFlags"/>
        <enum-type name="RasterPipeInterfaceRole"/>
        <enum-type name="RasterResamplingStage"/>
        <enum-type name="RasterRendererFlag" flags="RasterRendererFlags"/>
        <enum-type name="RasterAttributeTableFieldUsage"/>
        <enum-type name="RasterAttributeTableType"/>
        <enum-type name="RasterExportType"/>
        <enum-type name="RasterFileWriterResult"/>
        <enum-type name="MeshEditingErrorType"/>
        <enum-type name="FilePathType"/>
        <enum-type name="SublayerPromptMode"/>
        <enum-type name="FieldMetadataProperty"/>
        <enum-type name="SelectionRenderingMode"/>
        <enum-type name="SelectBehavior"/>
        <enum-type name="SelectGeometryRelationship"/>
        <enum-type name="SelectionFlag" flags="SelectionFlags"/>
        <enum-type name="VectorEditResult"/>
        <enum-type name="VertexMarkerType"/>
        <enum-type name="ContentStatus"/>
        <enum-type name="GpsConnectionType"/>
        <enum-type name="DeviceConnectionStatus"/>
        <enum-type name="GpsFixStatus"/>
        <enum-type name="GnssConstellation"/>
        <enum-type name="GpsQualityIndicator"/>
        <enum-type name="GpsInformationComponent" flags="GpsInformationComponents"/>
        <enum-type name="BabelFormatCapability" flags="BabelFormatCapabilities"/>
        <enum-type name="BabelCommandFlag" flags="BabelCommandFlags"/>
        <enum-type name="GpsFeatureType"/>
        <enum-type name="GeometryOperationResult"/>
        <enum-type name="GeometryValidityFlag" flags="GeometryValidityFlags"/>
        <enum-type name="GeometryValidationEngine"/>
        <enum-type name="BufferSide"/>
        <enum-type name="EndCapStyle"/>
        <enum-type name="JoinStyle"/>
        <enum-type name="MakeValidMethod"/>
        <enum-type name="SpatialFilterType"/>
        <enum-type name="FileOperationFlag" flags="FileOperationFlags"/>
        <enum-type name="MapLayerProperty" flags="MapLayerProperties"/>
        <enum-type name="DataProviderFlag" flags="DataProviderFlags"/>
        <enum-type name="CrsType"/>
        <enum-type name="CrsAxisDirection"/>
        <enum-type name="CoordinateOrder"/>
        <enum-type name="AnnotationItemFlag" flags="AnnotationItemFlags"/>
        <enum-type name="AnnotationItemGuiFlag" flags="AnnotationItemGuiFlags"/>
        <enum-type name="AnnotationItemNodeType"/>
        <enum-type name="AnnotationItemEditOperationResult"/>
        <enum-type name="VectorTemporalMode"/>
        <enum-type name="VectorTemporalLimitMode"/>
        <enum-type name="VectorDataProviderTemporalMode"/>
        <enum-type name="RasterTemporalMode"/>
        <enum-type name="TemporalIntervalMatchMethod"/>
        <enum-type name="RasterTemporalCapabilityFlag" flags="RasterTemporalCapabilityFlags"/>
        <enum-type name="TransformDirection"/>
        <enum-type name="CoordinateTransformationFlag" flags="CoordinateTransformationFlags"/>
        <enum-type name="MapSettingsFlag" flags="MapSettingsFlags"/>
        <enum-type name="RenderContextFlag" flags="RenderContextFlags"/>
        <enum-type name="TextRenderFormat"/>
        <enum-type name="LabelingFlag" flags="LabelingFlags"/>
        <enum-type name="LabelPlacementEngineVersion"/>
        <enum-type name="TextOrientation"/>
        <enum-type name="TextLayoutMode"/>
        <enum-type name="TextComponent"/>
        <enum-type name="TextHorizontalAlignment"/>
        <enum-type name="TextVerticalAlignment"/>
        <enum-type name="TextCharacterVerticalAlignment"/>
        <enum-type name="RenderSubcomponentProperty"/>
        <enum-type name="VertexType"/>
        <enum-type name="MarkerShape"/>
        <enum-type name="MarkerLinePlacement" flags="MarkerLinePlacements"/>
        <enum-type name="GradientColorSource"/>
        <enum-type name="GradientType"/>
        <enum-type name="SymbolCoordinateReference"/>
        <enum-type name="GradientSpread"/>
        <enum-type name="PointCountMethod"/>
        <enum-type name="MarkerClipMode"/>
        <enum-type name="LineClipMode"/>
        <enum-type name="DashPatternLineEndingRule"/>
        <enum-type name="DashPatternSizeAdjustment"/>
        <enum-type name="GraduatedMethod"/>
        <enum-type name="PlotAxisSuffixPlacement"/>
        <enum-type name="DpiMode"/>
        <enum-type name="TilePixelRatio"/>
        <enum-type name="Capitalization"/>
        <enum-type name="TextRendererFlag" flags="TextRendererFlags"/>
        <enum-type name="ScaleToTileZoomLevelMethod"/>
        <enum-type name="AngularDirection"/>
        <enum-type name="RendererUsage"/>
        <enum-type name="ViewSyncModeFlag" flags="ViewSyncModeFlags"/>
        <enum-type name="MapRecenteringMode"/>
        <enum-type name="HistoryProviderBackend" flags="HistoryProviderBackends"/>
        <enum-type name="CrsDefinitionFormat"/>
        <enum-type name="FieldDomainSplitPolicy"/>
        <enum-type name="FieldDomainMergePolicy"/>
        <enum-type name="FieldDomainType"/>
        <enum-type name="TransactionMode"/>
        <enum-type name="AltitudeClamping"/>
        <enum-type name="AltitudeBinding"/>
        <enum-type name="BetweenLineConstraint"/>
        <enum-type name="LineExtensionSide"/>
        <enum-type name="CadConstraintType"/>
        <enum-type name="ProjectFlag" flags="ProjectFlags"/>
        <enum-type name="PlotToolFlag" flags="PlotToolFlags"/>
        <enum-type name="LightSourceType"/>
        <enum-type name="NavigationMode"/>
        <enum-type name="VerticalAxisInversion"/>
        <enum-type name="ProfileSurfaceSymbology"/>
        <enum-type name="VectorProfileType"/>
        <enum-type name="ProfileGeneratorFlag" flags="ProfileGeneratorFlags"/>
        <enum-type name="ProfileExportType"/>
        <enum-type name="PointCloudSymbol"/>
        <enum-type name="PointCloudDrawOrder"/>
        <enum-type name="AvoidIntersectionsMode"/>
        <enum-type name="ProjectFileFormat"/>
        <enum-type name="ProjectReadFlag" flags="ProjectReadFlags"/>
        <enum-type name="ProjectCapability" flags="ProjectCapabilities"/>
        <enum-type name="MapBoxGlStyleSourceType"/>
        <enum-type name="ArcGisRestServiceType"/>
        <enum-type name="RelationshipType"/>
        <enum-type name="RelationshipStrength"/>
        <enum-type name="RelationshipCardinality"/>
        <enum-type name="RelationshipCapability" flags="RelationshipCapabilities"/>
        <enum-type name="CoordinateDisplayType"/>
        <enum-type name="SettingsOrigin"/>
        <enum-type name="ScriptLanguage"/>
        <enum-type name="ScriptLanguageCapability" flags="ScriptLanguageCapabilities"/>
        <enum-type name="LayerTreeInsertionMethod"/>
        <enum-type name="LayerTreeFilterFlag" flags="LayerTreeFilterFlags"/>
        <enum-type name="ActionType"/>
        <enum-type name="MapLayerActionTarget" flags="MapLayerActionTargets"/>
        <enum-type name="MapLayerActionFlag" flags="MapLayerActionFlags"/>
        <enum-type name="AttributeActionType"/>
        <enum-type name="MetadataDateType"/>
        <enum-type name="RasterColorInterpretation"/>
        <enum-type name="RasterLayerType"/>
        <enum-type name="RasterDrawingStyle"/>
        <enum-type name="RasterPyramidFormat"/>
        <enum-type name="RasterBuildPyramidOption"/>
        <enum-type name="RasterIdentifyFormat"/>
        <enum-type name="ElevationMapCombineMethod"/>
        <enum-type name="BlendMode"/>
        <enum-type name="SystemOfMeasurement"/>
        <enum-type name="MapToolUnit"/>
        <enum-type name="UnitType"/>
        <enum-type name="DistanceUnit"/>
        <enum-type name="DistanceUnitType"/>
        <enum-type name="AreaUnit"/>
        <enum-type name="VolumeUnit"/>
        <enum-type name="AngleUnit"/>
        <enum-type name="TemporalUnit"/>
        <enum-type name="RenderUnit"/>
        <enum-type name="LayoutUnit"/>
        <enum-type name="LayoutUnitType"/>
        <enum-type name="InputControllerType"/>
        <enum-type name="PostgresRelKind"/>
        <enum-type name="DatabaseProviderConnectionCapability2" flags="DatabaseProviderConnectionCapabilities2"/>
        <enum-type name="UserProfileSelectionPolicy"/>
        <enum-type name="AttributeEditorType"/>
        <enum-type name="AttributeEditorContainerType"/>
        <enum-type name="AttributeFormLayout"/>
        <enum-type name="AttributeFormSuppression"/>
        <enum-type name="AttributeFormPythonInitCodeSource"/>
        <enum-type name="ExpressionType"/>
        <enum-type name="FeatureSymbologyExport"/>
        <enum-type name="VectorTileProviderFlag" flags="VectorTileProviderFlags"/>
        <enum-type name="VectorTileProviderCapability" flags="VectorTileProviderCapabilities"/>
        <enum-type name="TileAvailability"/>
        <enum-type name="TiledSceneProviderCapability" flags="TiledSceneProviderCapabilities"/>
        <enum-type name="TiledSceneBoundingVolumeType"/>
        <enum-type name="TileRefinementProcess"/>
        <enum-type name="TileChildrenAvailability"/>
        <enum-type name="TiledSceneRequestFlag" flags="TiledSceneRequestFlags"/>
    </value-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/geometry/qgsrectangle.h:41 -->
    <value-type name="QgsRectangle">
        <add-function signature="__repr__()" return-type="PyObject*">
            <inject-code class="target" position="beginning"><![CDATA[
    QString str = QStringLiteral( "<QgsRectangle: %1>" ).arg( %CPPSELF->asWktCoordinates() );
    %PYARG_0 = PyUnicode_FromString( str.toUtf8().constData() );
]]></inject-code>
        </add-function>
    </value-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/proj/qgscoordinatereferencesystem.h:211 -->
    <value-type name="QgsCoordinateReferenceSystem">
        <enum-type name="CrsType"/>
        <enum-type name="IdentifierType"/>
        <enum-type name="WktVariant"/>
        <modify-function signature="createFromProj(const QString&amp;,bool)" remove="true"/>
        <modify-function signature="setCustomCrsValidation(CUSTOM_CRS_VALIDATION)" remove="true"/>
        <modify-function signature="customCrsValidation()" remove="true"/>
        <modify-function signature="axisOrdering()" remove="true"/>
        <modify-function signature="projObject()" remove="true"/>
        <modify-function signature="fromProjObject(PJ*)" remove="true"/>
        <modify-function signature="createFromProjObject(PJ*)" remove="true"/>
        <modify-function signature="invalidateCache(bool)" remove="true"/>
        <add-function signature="__repr__()" return-type="PyObject*">
            <inject-code class="target" position="beginning"><![CDATA[
    const QString str = %CPPSELF->isValid() ? QStringLiteral( "<QgsCoordinateReferenceSystem: %1%2>" ).arg( !%CPPSELF->authid().isEmpty() ? %CPPSELF->authid() : %CPPSELF->toWkt( QgsCoordinateReferenceSystem::WKT_PREFERRED ),
                        std::isfinite( %CPPSELF->coordinateEpoch() ) ? QStringLiteral( " @ %1" ).arg( %CPPSELF->coordinateEpoch() ) : QString() )
                        : QStringLiteral( "<QgsCoordinateReferenceSystem: invalid>" );
    %PYARG_0 = PyUnicode_FromString( str.toUtf8().constData() );
]]></inject-code>
        </add-function>
    </value-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/proj/qgscoordinatetransformcontext.h:57 -->
    <value-type name="QgsCoordinateTransformContext">
        <modify-function signature="operator=(const QgsCoordinateTransformContext&amp;)" remove="true"/>
    </value-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/qgsfeedback.h:44 -->
    <object-type name="QgsFeedback"/>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/raster/qgsrasterblock.h:36 -->
    <value-type name="QgsRasterBlock">
        <modify-function signature="valueAndNoData(int,int,bool&amp;)" remove="true"/>
        <modify-function signature="valueAndNoData(qgssize,bool&amp;)" remove="true"/>
        <modify-function signature="byteData()" remove="true"/>
        <modify-function signature="colorData()" remove="true"/>
        <modify-function signature="bits(int,int)" remove="true"/>
        <modify-function signature="bits(qgssize)" remove="true"/>
        <modify-function signature="bits()" remove="true"/>
        <modify-function signature="printValue(float)" remove="true"/>
        <modify-function signature="readValue(void*,Qgis::DataType,qgssize)" remove="true"/>
        <modify-function signature="writeValue(void*,Qgis::DataType,qgssize,double)" remove="true"/>
    </value-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/qgsfield.h:52 -->
    <value-type name="QgsField">
        <modify-function signature="operator=(const QgsField&amp;)" remove="true"/>
        <modify-function signature="metadata(Qgis::FieldMetadataProperty)" remove="true"/>
        <modify-function signature="setMetadata(Qgis::FieldMetadataProperty,const QVariant&amp;)" remove="true"/>
        <modify-function signature="configurationFlags()" remove="true"/>
        <modify-function signature="setConfigurationFlags(QgsField::ConfigurationFlags)" remove="true"/>
        <modify-function signature="readableConfigurationFlag(QgsField::ConfigurationFlag)" remove="true"/>
        <modify-function signature="convertCompatible(QVariant&amp;,QString*)" remove="true"/>
        <add-function signature="__repr__()" return-type="PyObject*">
            <inject-code class="target" position="beginning"><![CDATA[
    QString str = QStringLiteral( "<QgsField: %1 (%2)>" ).arg( %CPPSELF->name() ).arg( %CPPSELF->typeName() );
    %PYARG_0 = PyUnicode_FromString( str.toUtf8().constData() );
]]></inject-code>
        </add-function>
    </value-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/qgsfields.h:44 -->
    <value-type name="QgsFields">
        <enum-type name="FieldOrigin"/>
        <modify-function signature="operator=(const QgsFields&amp;)" remove="true"/>
        <modify-function signature="remove(int)" remove="true"/>
        <modify-function signature="operator[](int)" remove="true"/>
        <modify-function signature="at(int)" remove="true"/>
        <modify-function signature="field(int)" remove="true"/>
        <modify-function signature="field(const QString&amp;)" remove="true"/>
        <modify-function signature="fieldOrigin(int)" remove="true"/>
        <modify-function signature="fieldOriginIndex(int)" remove="true"/>
        <modify-function signature="iconForField(int,bool)" remove="true"/>
        <modify-function signature="constBegin()" remove="true"/>
        <modify-function signature="constEnd()" remove="true"/>
        <modify-function signature="begin()" remove="true"/>
        <modify-function signature="end()" remove="true"/>
        <modify-function signature="begin()" remove="true"/>
        <modify-function signature="end()" remove="true"/>
        <add-function signature="remove(int)">
            <inject-code class="target" position="beginning"><![CDATA[
    if ( %1 < 0 || %1 >= %CPPSELF->count() )
    {
      PyErr_SetString( PyExc_KeyError, QByteArray::number( %1 ) );
      return nullptr;
    }
    else
    {
      %CPPSELF->remove( %1 );
    }
]]></inject-code>
        </add-function>
        <add-function signature="__len__()">
            <inject-code class="target" position="beginning"><![CDATA[
    return %CPPSELF->count();
]]></inject-code>
        </add-function>
        <add-function signature="__bool__()" return-type="int">
            <inject-code class="target" position="beginning"><![CDATA[
    Py_RETURN_TRUE;
]]></inject-code>
        </add-function>
        <add-function signature="at(int)" return-type="QgsField">
            <inject-code class="target" position="beginning"><![CDATA[
    if ( %1 < 0 || %1 >= %CPPSELF->count() )
    {
      PyErr_SetString( PyExc_KeyError, QByteArray::number( %1 ) );
      return nullptr;
    }
    else
    {
      auto var = new QgsField( %CPPSELF->at( %1 ) );
      %PYARG_0 = %CONVERTTOPYTHON[QgsField *](var);
    }
]]></inject-code>
        </add-function>
        <add-function signature="field(int)" return-type="QgsField">
            <inject-code class="target" position="beginning"><![CDATA[
    if ( %1 < 0 || %1 >= %CPPSELF->count() )
    {
      PyErr_SetString( PyExc_KeyError, QByteArray::number( %1 ) );
      return nullptr;
    }
    else
    {
      auto var = new QgsField( %CPPSELF->field( %1 ) );
      %PYARG_0 = %CONVERTTOPYTHON[QgsField *](var);
    }
]]></inject-code>
        </add-function>
        <add-function signature="field(const QString&amp;)" return-type="QgsField">
            <inject-code class="target" position="beginning"><![CDATA[
    int fieldIdx = %CPPSELF->indexFromName( %1 );
    if ( fieldIdx == -1 )
    {
      PyErr_SetString( PyExc_KeyError, %1.toLatin1() );
      return nullptr;
    }
    else
    {
      auto var = new QgsField( %CPPSELF->field( %1 ) );
      %PYARG_0 = %CONVERTTOPYTHON[QgsField *](var);
    }
]]></inject-code>
        </add-function>
        <add-function signature="fieldOrigin(int)" return-type="QgsFields::FieldOrigin">
            <inject-code class="target" position="beginning"><![CDATA[
    if ( %1 < 0 || %1 >= %CPPSELF->count() )
    {
      PyErr_SetString( PyExc_KeyError, QByteArray::number( %1 ) );
      return nullptr;
    }
    else
    {
      auto var =  %CPPSELF->fieldOrigin( %1 );
      %PYARG_0 = %CONVERTTOPYTHON[QgsFields::FieldOrigin](var);
    }
]]></inject-code>
        </add-function>
        <add-function signature="fieldOriginIndex(int)" return-type="int">
            <inject-code class="target" position="beginning"><![CDATA[
    if ( %1 < 0 || %1 >= %CPPSELF->count() )
    {
      PyErr_SetString( PyExc_KeyError, QByteArray::number( %1 ) );
      return nullptr;
    }
    else
    {
      auto var =  %CPPSELF->fieldOriginIndex( %1 );
      %PYARG_0 = %CONVERTTOPYTHON[int](var);
    }
]]></inject-code>
        </add-function>
        <add-function signature="iconForField(int,bool= false )" return-type="QIcon">
            <inject-code class="target" position="beginning"><![CDATA[
    if ( %1 < 0 || %1 >= %CPPSELF->count() )
    {
      PyErr_SetString( PyExc_KeyError, QByteArray::number( %1 ) );
      return nullptr;
    }
    else
    {
      auto var = new QIcon( %CPPSELF->iconForField( %1 ) );
      %PYARG_0 = %CONVERTTOPYTHON[QIcon *](var);
    }
]]></inject-code>
        </add-function>
    </value-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/qgsfeature.h:55 -->
    <value-type name="QgsFeature">
        <modify-function signature="QgsFeature(const QgsFields&amp;,QgsFeatureId)" remove="true"/>
        <modify-function signature="attributeMap()" remove="true"/>
        <modify-function signature="setAttribute(int,const QVariant&amp;)" remove="true"/>
        <modify-function signature="deleteAttribute(int)" remove="true"/>
        <modify-function signature="setGeometry(std::unique_ptr)" remove="true"/>
        <modify-function signature="setAttribute(const QString&amp;,const QVariant&amp;)" remove="true"/>
        <modify-function signature="deleteAttribute(const QString&amp;)" remove="true"/>
        <modify-function signature="attribute(const QString&amp;)" remove="true"/>
        <modify-function signature="attribute(int)" remove="true"/>
        <modify-function signature="isUnsetValue(int)" remove="true"/>
        <modify-function signature="QgsFeature(QgsFeatureId)" remove="false"/>
        <add-function signature="__setitem__">
            <inject-code class="target" position="beginning" file="./qgis_core.cpp" snippet="QgsFeature-__setitem__"/>
        </add-function>
        <add-function signature="__setitem__">
            <inject-code class="target" position="beginning" file="./qgis_core.cpp" snippet="QgsFeature-__setitem__"/>
        </add-function>
        <add-function signature="__delitem__(int)">
            <inject-code class="target" position="beginning"><![CDATA[
    if ( %1 >= 0 && %1 < %CPPSELF->attributes().count() )
      %CPPSELF->deleteAttribute( %1 );
    else
    {
      PyErr_SetString( PyExc_KeyError, QByteArray::number( %1 ) );
      return nullptr;
    }
]]></inject-code>
        </add-function>
        <add-function signature="__delitem__(const QString&amp;)">
            <inject-code class="target" position="beginning"><![CDATA[
    int fieldIdx = %CPPSELF->fieldNameIndex( %1 );
    if ( fieldIdx == -1 )
    {
      PyErr_SetString( PyExc_KeyError, %1.toLatin1() );
      return nullptr;
    }
    else
      %CPPSELF->deleteAttribute( fieldIdx );
]]></inject-code>
        </add-function>
        <add-function signature="__hash__()" return-type="long">
            <inject-code class="target" position="beginning"><![CDATA[
    auto var =  qHash( *%CPPSELF );
    %PYARG_0 = %CONVERTTOPYTHON[long](var);
]]></inject-code>
        </add-function>
        <add-function signature="setAttribute(int,const QVariant&amp;)" return-type="bool">
            <inject-code class="target" position="beginning"><![CDATA[
    bool rv;

    if ( !%2.isValid() )
    {
      rv = %CPPSELF->setAttribute( %1, QVariant( QMetaType( QMetaType::Int ) ) );
    }
    else
    {
      rv = %CPPSELF->setAttribute( %1, %2 );
    }

    if ( !rv )
    {
      PyErr_SetString( PyExc_KeyError, QByteArray::number( %1 ) );
      return nullptr;
    }

    auto var =  rv;
    %PYARG_0 = %CONVERTTOPYTHON[bool](var);
]]></inject-code>
        </add-function>
        <add-function signature="deleteAttribute(int)">
            <inject-code class="target" position="beginning"><![CDATA[
    if ( %1 >= 0 && %1 < %CPPSELF->attributes().count() )
      %CPPSELF->deleteAttribute( %1 );
    else
    {
      PyErr_SetString( PyExc_KeyError, QByteArray::number( %1 ) );
      return nullptr;
    }
]]></inject-code>
        </add-function>
        <add-function signature="setAttribute(const QString&amp;,const QVariant&amp;)">
            <inject-code class="target" position="beginning"><![CDATA[
    int fieldIdx = %CPPSELF->fieldNameIndex( %1 );
    if ( fieldIdx == -1 )
    {
      PyErr_SetString( PyExc_KeyError, %1.toLatin1() );
      return nullptr;
    }
    else
    {
      if ( !%2.isValid() )
      {
        %CPPSELF->setAttribute( %1, QVariant( QMetaType( QMetaType::Int ) ) );
      }
      else
      {
        %CPPSELF->setAttribute( fieldIdx, %2 );
      }
    }
]]></inject-code>
        </add-function>
        <add-function signature="deleteAttribute(const QString&amp;)" return-type="bool">
            <inject-code class="target" position="beginning"><![CDATA[
    int fieldIdx = %CPPSELF->fieldNameIndex( %1 );
    if ( fieldIdx == -1 )
    {
      PyErr_SetString( PyExc_KeyError, %1.toLatin1() );
      return nullptr;
      Py_RETURN_FALSE;
    }
    else
    {
      %CPPSELF->deleteAttribute( fieldIdx );
      Py_RETURN_TRUE;
    }
]]></inject-code>
        </add-function>
        <add-function signature="isUnsetValue(int)" return-type="bool">
            <inject-code class="target" position="beginning"><![CDATA[
    {
      if ( %1 < 0 || %1 >= %CPPSELF->attributes().count() )
      {
        PyErr_SetString( PyExc_KeyError, QByteArray::number( %1 ) );
        return nullptr;
      }
      else
      {
        auto var =  %CPPSELF->isUnsetValue( %1 );
        %PYARG_0 = %CONVERTTOPYTHON[bool](var);
      }
    }
]]></inject-code>
        </add-function>
    </value-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/geometry/qgspoint.h:48 -->
    <object-type name="QgsPoint">
        <modify-function signature="QgsPoint(double,double,double,double,Qgis::WkbType)" remove="true"/>
        <modify-function signature="QgsPoint(const QgsPointXY&amp;)" remove="true"/>
        <modify-function signature="QgsPoint(QPointF)" remove="true"/>
        <modify-function signature="QgsPoint(Qgis::WkbType,double,double,double,double)" remove="true"/>
        <modify-function signature="rx()" remove="true"/>
        <modify-function signature="ry()" remove="true"/>
        <modify-function signature="rz()" remove="true"/>
        <modify-function signature="rm()" remove="true"/>
        <modify-function signature="asJsonObject(int)" remove="true"/>
        <modify-function signature="filterVertices(const std::function&amp;)" remove="true"/>
        <modify-function signature="transformVertices(const std::function&amp;)" remove="true"/>
        <modify-function signature="cast(const QgsAbstractGeometry*)" remove="true"/>
        <add-function signature="__repr__()" return-type="PyObject*">
            <inject-code class="target" position="beginning"><![CDATA[
    QString str = QStringLiteral( "<QgsPoint: %1>" ).arg( %CPPSELF->asWkt() );
    %PYARG_0 = PyUnicode_FromString( str.toUtf8().constData() );
]]></inject-code>
        </add-function>
    </object-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/geometry/qgsgeometry.h:163 -->
    <value-type name="QgsGeometry">
        <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/geometry/qgsgeometry.h:2611 -->
        <value-type name="Error">
            <add-function signature="__repr__()" return-type="PyObject*">
                <inject-code class="target" position="beginning"><![CDATA[
        QString str = QStringLiteral( "<QgsGeometry.Error: %1>" ).arg( %CPPSELF->what() );
        %PYARG_0 = PyUnicode_FromString( str.toUtf8().data() );
]]></inject-code>
            </add-function>
        </value-type>
        <modify-function signature="operator=(const QgsGeometry&amp;)" remove="true"/>
        <modify-function signature="QgsGeometry(std::unique_ptr)" remove="true"/>
        <modify-function signature="fromWkb(unsigned char*,int)" remove="true"/>
        <modify-function signature="vertices_begin()" remove="true"/>
        <modify-function signature="vertices_end()" remove="true"/>
        <modify-function signature="parts_begin()" remove="true"/>
        <modify-function signature="parts_end()" remove="true"/>
        <modify-function signature="const_parts_begin()" remove="true"/>
        <modify-function signature="const_parts_end()" remove="true"/>
        <modify-function signature="splitGeometry(const QVector&amp;,QVector&amp;,bool,QVector&amp;,bool)" remove="true"/>
        <modify-function signature="splitGeometry(const QgsPointSequence&amp;,QVector&amp;,bool,QgsPointSequence&amp;,bool,bool)" remove="true"/>
        <modify-function signature="makeDifferenceInPlace(const QgsGeometry&amp;)" remove="true"/>
        <modify-function signature="orientedMinimumBoundingBox()" remove="true"/>
        <modify-function signature="minimalEnclosingCircle(unsigned int)" remove="true"/>
        <modify-function signature="randomPointsInPolygon(int,const std::function&amp;,unsigned long,QgsFeedback*,int)" remove="true"/>
        <modify-function signature="randomPointsInPolygon(int,unsigned long,QgsFeedback*)" remove="true"/>
        <modify-function signature="asJsonObject(int)" remove="true"/>
        <modify-function signature="asPoint()" remove="true"/>
        <modify-function signature="asPolyline()" remove="true"/>
        <modify-function signature="asPolygon()" remove="true"/>
        <modify-function signature="asMultiPoint()" remove="true"/>
        <modify-function signature="asMultiPolyline()" remove="true"/>
        <modify-function signature="asMultiPolygon()" remove="true"/>
        <modify-function signature="filterVertices(const std::function&amp;)" remove="true"/>
        <modify-function signature="transformVertices(const std::function&amp;)" remove="true"/>
        <modify-function signature="compare(const QgsPolylineXY&amp;,const QgsPolylineXY&amp;,double)" remove="true"/>
        <modify-function signature="compare(const QgsPolygonXY&amp;,const QgsPolygonXY&amp;,double)" remove="true"/>
        <modify-function signature="compare(const QgsMultiPolygonXY&amp;,const QgsMultiPolygonXY&amp;,double)" remove="true"/>
        <add-function signature="__repr__()" return-type="PyObject*">
            <inject-code class="target" position="beginning"><![CDATA[
    QString str;
    if ( %CPPSELF->isNull() )
      str = QStringLiteral( "<QgsGeometry: null>" );
    else
    {
      QString wkt = %CPPSELF->asWkt();
      if ( wkt.length() > 1000 )
        wkt = wkt.left( 1000 ) + QStringLiteral( "..." );
      str = QStringLiteral( "<QgsGeometry: %1>" ).arg( wkt );
    }
    %PYARG_0 = PyUnicode_FromString( str.toUtf8().constData() );
]]></inject-code>
        </add-function>
    </value-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/qgsexpressioncontext.h:117 -->
    <value-type name="QgsExpressionContextScope">
        <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/qgsexpressioncontext.h:124 -->
        <value-type name="StaticVariable"/>
    </value-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/qgsexpressioncontext.h:480 -->
    <value-type name="QgsExpressionContext">
        <modify-function signature="operator=(const QgsExpressionContext&amp;)" remove="true"/>
        <modify-function signature="operator=(QgsExpressionContext&amp;&amp;)" remove="true"/>
        <modify-function signature="activeScopeForVariable(const QString&amp;)" remove="true"/>
        <modify-function signature="takeScopes()" remove="true"/>
    </value-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/expression/qgsexpression.h:189 -->
    <value-type name="QgsExpression">
        <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/expression/qgsexpression.h:198 -->
        <value-type name="ParserError">
            <enum-type name="ParserErrorType"/>
        </value-type>
        <enum-type name="SpatialOperator"/>
        <modify-function signature="operator QString()" remove="true"/>
        <modify-function signature="nodes()" remove="true"/>
        <modify-function signature="findNodes()" remove="true"/>
        <modify-function signature="functionHelpTexts()" remove="true"/>
        <modify-function signature="detach()" remove="true"/>
        <modify-function signature="initFunctionHelp()" remove="true"/>
        <modify-function signature="initVariableHelp()" remove="true"/>
        <add-function signature="__repr__()" return-type="PyObject*">
            <inject-code class="target" position="beginning"><![CDATA[
    QString str = QStringLiteral( "<QgsExpression: '%1'>" ).arg( %CPPSELF->expression() );
    %PYARG_0 = PyUnicode_FromString( str.toUtf8().constData() );
]]></inject-code>
        </add-function>
    </value-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/qgsfeaturerequest.h:83 -->
    <value-type name="QgsFeatureRequest">
        <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/qgsfeaturerequest.h:139 -->
        <value-type name="OrderByClause"/>
        <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/qgsfeaturerequest.h:251 -->
        <value-type name="OrderBy">
            <modify-function signature="resize(qsizetype)" remove="true"/>
            <modify-function signature="value(qsizetype)const" remove="true"/>
        </value-type>
        <enum-type name="Flag" flags="Flags"/>
        <enum-type name="FilterType"/>
        <enum-type name="InvalidGeometryCheck"/>
        <modify-function signature="referenceGeometryEngine()" remove="true"/>
        <modify-function signature="setInvalidGeometryCallback(const std::function&amp;)" remove="true"/>
        <modify-function signature="invalidGeometryCallback(const QgsFeature&amp;)" remove="true"/>
        <modify-function signature="limit()" remove="true"/>
        <modify-function signature="setTransformErrorCallback(const std::function&amp;)" remove="true"/>
        <modify-function signature="transformErrorCallback(const QgsFeature&amp;)" remove="true"/>
    </value-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/qgsrange.h:202 -->
    <value-type name="QgsDoubleRange">
        <!-- TODO error here because some methods avec expose only for sip files -->
        <!--modify-function signature="QgsDoubleRange(double,double,bool,bool)" remove="true"/-->
        <add-function signature="__repr__()" return-type="PyObject*">
            <inject-code class="target" position="beginning"><![CDATA[
    QString str = QStringLiteral( "<QgsDoubleRange: %1%2, %3%4>" ).arg( %CPPSELF->includeLower() ? QStringLiteral( "[" ) : QStringLiteral( "(" ) )
                  .arg( %CPPSELF->lower() )
                  .arg( %CPPSELF->upper() )
                  .arg( %CPPSELF->includeUpper() ? QStringLiteral( "]" ) : QStringLiteral( ")" ) );
    %PYARG_0 = PyUnicode_FromString( str.toUtf8().constData() );
]]></inject-code>
        </add-function>
    </value-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/metadata/qgsabstractmetadatabase.h:57 -->
    <object-type name="QgsAbstractMetadataBase">
        <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/metadata/qgsabstractmetadatabase.h:86 -->
        <value-type name="Address"/>
        <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/metadata/qgsabstractmetadatabase.h:140 -->
        <value-type name="Contact"/>
        <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/metadata/qgsabstractmetadatabase.h:210 -->
        <value-type name="Link"/>
    </object-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/metadata/qgslayermetadata.h:56 -->
    <value-type name="QgsLayerMetadata">
        <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/metadata/qgslayermetadata.h:63 -->
        <value-type name="SpatialExtent"/>
        <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/metadata/qgslayermetadata.h:91 -->
        <value-type name="Extent"/>
        <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/metadata/qgslayermetadata.h:138 -->
        <value-type name="Constraint"/>
        <modify-function signature="extent()" remove="true"/>
    </value-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/qgsreadwritecontext.h:34 -->
    <value-type name="QgsReadWriteContext">
        <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/qgsreadwritecontext.h:42 -->
        <value-type name="ReadWriteMessage">
            <add-function signature="__repr__()" return-type="PyObject*">
                <inject-code class="target" position="beginning"><![CDATA[
        QString str = QStringLiteral( "<QgsReadWriteContext.ReadWriteMessage: %1>" ).arg( %CPPSELF->message() );
        %PYARG_0 = PyUnicode_FromString( str.toUtf8().constData() );
]]></inject-code>
            </add-function>
        </value-type>
    </value-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/providers/qgsdataprovider.h:41 -->
    <object-type name="QgsDataProvider">
        <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/providers/qgsdataprovider.h:108 -->
        <value-type name="ProviderOptions"/>
        <enum-type name="DataCapability" flags="DataCapabilities"/>
        <enum-type name="ProviderProperty"/>
        <enum-type name="ReadFlag" flags="ReadFlags"/>
        <modify-function signature="temporalCapabilities()" remove="true"/>
        <modify-function signature="elevationProperties()" remove="true"/>
        <modify-function signature="setProviderProperty(int,const QVariant&amp;)" remove="true"/>
        <modify-function signature="providerProperty(int,const QVariant&amp;)" remove="true"/>
        <modify-function signature="renderInPreview(const QgsDataProvider::PreviewContext&amp;)" remove="true"/>
        <modify-function signature="transformContext()" remove="true"/>
        <modify-function signature="setTransformContext(const QgsCoordinateTransformContext&amp;)" remove="true"/>
    </object-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/qgsmaplayer.h:73 -->
    <object-type name="QgsMapLayer">
        <enum-type name="PropertyType"/>
        <enum-type name="LayerFlag" flags="LayerFlags"/>
        <enum-type name="StyleCategory" flags="StyleCategories"/>
        <enum-type name="ReadFlag" flags="ReadFlags"/>
        <modify-function signature="dataProvider()" remove="true"/>
        <modify-function signature="serverProperties()" remove="true"/>
        <modify-function signature="customEnumProperty(const QString&amp;,const T&amp;)" remove="true"/>
        <modify-function signature="setCustomEnumProperty(const QString&amp;,const T&amp;)" remove="true"/>
        <modify-function signature="customFlagProperty(const QString&amp;,const T&amp;)" remove="true"/>
        <modify-function signature="setCustomFlagProperty(const QString&amp;,const T&amp;)" remove="true"/>
        <modify-function signature="crsHtmlMetadata()" remove="true"/>
        <modify-function signature="generalHtmlMetadata()" remove="true"/>
        <add-function signature="__repr__()" return-type="PyObject*">
            <inject-code class="target" position="beginning"><![CDATA[
    QString str = QStringLiteral( "<QgsMapLayer: '%1' (%2)>" ).arg( %CPPSELF->name(), %CPPSELF->dataProvider() ? %CPPSELF->dataProvider()->name() : QStringLiteral( "Invalid" ) );
    %PYARG_0 = PyUnicode_FromString( str.toUtf8().constData() );
]]></inject-code>
        </add-function>
    </object-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/qgstemporalrangeobject.h:33 -->
    <value-type name="QgsTemporalRangeObject"/>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/qgsmapsettings.h:89 -->
    <value-type name="QgsMapSettings"/>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/qgsrendercontext.h:60 -->
    <value-type name="QgsRenderContext">
        <modify-function signature="painter()" remove="true"/>
        <modify-function signature="labelingEngine()" remove="true"/>
        <modify-function signature="labelSink()" remove="true"/>
        <modify-function signature="setLabelingEngine(QgsLabelingEngine*)" remove="true"/>
        <modify-function signature="setLabelSink(QgsLabelSink*)" remove="true"/>
        <modify-function signature="expressionContext()" remove="true"/>
    </value-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/raster/qgsrasterinterface.h:41 -->
    <object-type name="QgsRasterBlockFeedback"/>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/raster/qgsrasterinterface.h:135 -->
    <object-type name="QgsRasterInterface">
        <enum-type name="Capability"/>
        <modify-function signature="sourceInput()" remove="true"/>
        <modify-function signature="histogram(int,int,double,double,const QgsRectangle&amp;,int,bool,QgsRasterBlockFeedback*)" remove="true"/>
        <modify-function signature="hasHistogram(int,int,double,double,const QgsRectangle&amp;,int,bool)" remove="true"/>
        <modify-function signature="initHistogram(QgsRasterHistogram&amp;,int,int,double,double,const QgsRectangle&amp;,int,bool)" remove="true"/>
        <add-function signature="hasHistogram(int,int,PyObject*= Py_None,PyObject*= Py_None,const QgsRectangle&amp;= QgsRectangle(),int= 0,bool= false )" return-type="bool">
            <inject-code class="target" position="beginning"><![CDATA[
    double minimum;
    double maximum;
    if ( %3 == Py_None )
    {
      minimum = std::numeric_limits<double>::quiet_NaN();
    }
    else
    {
      minimum = PyFloat_AsDouble( %3 );
    }

    if ( %4 == Py_None )
    {
      maximum = std::numeric_limits<double>::quiet_NaN();
    }
    else
    {
      maximum = PyFloat_AsDouble( %4 );
    }

    auto var =  %CPPSELF->hasHistogram( %1, %2, minimum, maximum, %5, %6, %7 );
    %PYARG_0 = %CONVERTTOPYTHON[bool](var);
]]></inject-code>
        </add-function>
    </object-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/raster/qgsrasterattributetable.h:43 -->
    <value-type name="QgsRasterAttributeTable">
        <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/raster/qgsrasterattributetable.h:55 -->
        <value-type name="UsageInformation"/>
        <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/raster/qgsrasterattributetable.h:89 -->
        <value-type name="Field"/>
        <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/raster/qgsrasterattributetable.h:119 -->
        <value-type name="MinMaxClass"/>
        <modify-function signature="usages()" remove="true"/>
        <modify-function signature="usageInformation()" remove="true"/>
    </value-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/raster/qgsrasterdataprovider.h:58 -->
    <object-type name="QgsImageFetcher"/>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/raster/qgsrasterdataprovider.h:89 -->
    <object-type name="QgsRasterDataProvider">
        <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/raster/qgsrasterdataprovider.h:552 -->
        <value-type name="VirtualRasterInputLayers"/>
        <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/raster/qgsrasterdataprovider.h:564 -->
        <value-type name="VirtualRasterParameters"/>
        <enum-type name="ProviderCapability" flags="ProviderCapabilities"/>
        <enum-type name="TransformType"/>
        <enum-type name="ResamplingMethod"/>
        <modify-function signature="temporalCapabilities()" remove="true"/>
        <modify-function signature="elevationProperties()" remove="true"/>
        <modify-function signature="getLegendGraphic(double,bool,const QgsRectangle*)" remove="true"/>
        <modify-function signature="readBlock(int,int,int,void*)" remove="true"/>
        <modify-function signature="readBlock(int,const QgsRectangle&amp;,int,int,void*,QgsRasterBlockFeedback*)" remove="true"/>
    </object-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/elevation/qgsabstractprofilesource.h:33 -->
    <object-type name="QgsAbstractProfileSource"/>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/qgsfeatureiterator.h:289 -->
    <value-type name="QgsFeatureIterator">
        <modify-function signature="setInterruptionChecker(QgsFeedback*)" remove="true"/>
        <add-function signature="__iter__()" return-type="QgsFeatureIterator*">
            <inject-code class="target" position="beginning"><![CDATA[
    auto var =  %CPPSELF;
    %PYARG_0 = %CONVERTTOPYTHON[QgsFeatureIterator*](var);
]]></inject-code>
        </add-function>
    </value-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/qgsfeaturesink.h:33 -->
    <object-type name="QgsFeatureSink">
        <enum-type name="SinkFlag" flags="SinkFlags"/>
        <enum-type name="Flag" flags="Flags"/>
    </object-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/qgsfeaturesource.h:37 -->
    <object-type name="QgsFeatureSource">
        <enum-type name="FeatureAvailability"/>
        <enum-type name="SpatialIndexPresence"/>
        <add-function signature="__len__()">
            <inject-code class="target" position="beginning"><![CDATA[
    return %CPPSELF->featureCount();
]]></inject-code>
        </add-function>
        <add-function signature="__bool__()" return-type="int">
            <inject-code class="target" position="beginning"><![CDATA[
    Py_RETURN_TRUE;
]]></inject-code>
        </add-function>
    </object-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/qgsapplication.h:95 -->
    <object-type name="QgsApplication">
        <enum-type name="StyleSheetType"/>
        <enum-type name="Cursor"/>
        <enum-type name="endian_t"/>
        <modify-function signature="QgsApplication(int&amp;,char**,bool,const QString&amp;,const QString&amp;)" remove="true"/>
        <modify-function signature="init(QString)" remove="true"/>
        <modify-function signature="rasterRendererRegistry()" remove="true"/>
        <modify-function signature="tileDownloadManager()" remove="true"/>
        <modify-function signature="annotationRegistry()" remove="true"/>
        <modify-function signature="preNotify(QObject*,QEvent*,bool*)" remove="true"/>
        <modify-function signature="installTranslators()" remove="true"/>
    </object-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/editform/qgseditformconfig.h:40 -->
    <value-type name="QgsEditFormConfig">
        <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/editform/qgseditformconfig.h:47 -->
        <value-type name="GroupData"/>
        <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/editform/qgseditformconfig.h:59 -->
        <value-type name="TabData"/>
        <enum-type name="DataDefinedProperty"/>
    </value-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/qgsexpressioncontextgenerator.h:36 -->
    <object-type name="QgsExpressionContextGenerator"/>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/qgsexpressioncontextscopegenerator.h:28 -->
    <object-type name="QgsExpressionContextScopeGenerator"/>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/vector/qgsvectorlayer.h:399 -->
    <object-type name="QgsVectorLayer">
        <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/vector/qgsvectorlayer.h:422 -->
        <value-type name="LayerOptions"/>
        <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/vector/qgsvectorlayer.h:535 -->
        <value-type name="DeleteContext"/>
        <modify-function signature="dataProvider()" remove="true"/>
        <modify-function signature="joinBuffer()" remove="true"/>
        <modify-function signature="actions()" remove="true"/>
        <modify-function signature="renderer()" remove="true"/>
        <modify-function signature="auxiliaryLayer()" remove="true"/>
        <modify-function signature="labeling()" remove="true"/>
        <modify-function signature="setFieldSplitPolicy(int,Qgis::FieldDomainSplitPolicy)" remove="true"/>
        <modify-function signature="weakRelations()" remove="true"/>
        <modify-function signature="setWeakRelations(const QList&amp;)" remove="true"/>
        <modify-function signature="editBuffer()" remove="true"/>
        <modify-function signature="setFieldConfigurationFlags(int,QgsField::ConfigurationFlags)" remove="true"/>
        <modify-function signature="setFieldConfigurationFlag(int,QgsField::ConfigurationFlag,bool)" remove="true"/>
        <modify-function signature="fieldConfigurationFlags(int)" remove="true"/>
        <modify-function signature="allowCommit()" remove="true"/>
        <modify-function signature="setAllowCommit(bool)" remove="true"/>
        <add-function signature="__repr__()" return-type="PyObject*">
            <inject-code class="target" position="beginning"><![CDATA[
    QString str = QStringLiteral( "<QgsVectorLayer: '%1' (%2)>" ).arg( %CPPSELF->name(), %CPPSELF->dataProvider() ? %CPPSELF->dataProvider()->name() : QStringLiteral( "Invalid" ) );
    %PYARG_0 = PyUnicode_FromString( str.toUtf8().constData() );
]]></inject-code>
        </add-function>
    </object-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/qgsmaplayerrenderer.h:51 -->
    <object-type name="QgsMapLayerRenderer">
        <modify-function signature="renderContext()" remove="true"/>
        <modify-function signature="setLayerRenderingTimeHint(int)" remove="true"/>
    </object-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/layout/qgslayout.h:49 -->
    <object-type name="QgsLayout">
        <enum-type name="ZValues"/>
        <enum-type name="UndoCommand"/>
        <modify-function signature="layoutItems(QList&amp;)" remove="true"/>
        <modify-function signature="layoutObjects(QList&amp;)" remove="true"/>
        <modify-function signature="renderContext()" remove="true"/>
        <modify-function signature="reportContext()" remove="true"/>
        <modify-function signature="snapper()" remove="true"/>
        <modify-function signature="gridSettings()" remove="true"/>
        <modify-function signature="guides()" remove="true"/>
        <modify-function signature="pageCollection()" remove="true"/>
        <modify-function signature="undoStack()" remove="true"/>
    </object-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/mesh/qgstopologicalmesh.h:47 -->
    <value-type name="QgsTopologicalMesh">
        <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/mesh/qgstopologicalmesh.h:62 -->
        <value-type name="TopologicalFaces"/>
        <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/mesh/qgstopologicalmesh.h:96 -->
        <value-type name="Changes"/>
    </value-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/mesh/qgsmeshadvancedediting.h:38 -->
    <object-type name="QgsMeshAdvancedEditing" force-abstract="true" disable-wrapper="true">
        <modify-function signature="apply(QgsMeshEditor*)" remove="true"/>
    </object-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/mesh/qgsmeshadvancedediting.h:96 -->
    <object-type name="QgsMeshEditRefineFaces"/>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/mesh/qgsmesheditor.h:67 -->
    <object-type name="QgsMeshEditor">
        <modify-function signature="QgsMeshEditor(QgsMesh*,QgsTriangularMesh*,QObject*)" remove="true"/>
        <modify-function signature="resetTriangularMesh(QgsTriangularMesh*)" remove="true"/>
        <modify-function signature="faceCanBeAddedWithNewVertices(const QList&amp;,const QList&amp;)" remove="true"/>
        <modify-function signature="addFaces(const QVector&amp;)" remove="true"/>
        <modify-function signature="addFaceWithNewVertices(const QList&amp;,const QList&amp;)" remove="true"/>
        <modify-function signature="addVertices(const QVector&amp;,double)" remove="true"/>
        <modify-function signature="canBeTransformed(const QList&amp;,const std::function&amp;)" remove="true"/>
        <modify-function signature="vertexCirculator(int)" remove="true"/>
        <modify-function signature="topologicalMesh()" remove="true"/>
        <modify-function signature="triangularMesh()" remove="true"/>
    </object-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/qgsrenderchecker.h:41 -->
    <value-type name="QgsRenderChecker">
        <enum-type name="Flag" flags="Flags"/>
    </value-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/qgsmultirenderchecker.h:56 -->
    <value-type name="QgsMultiRenderChecker"/>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/qgsmultirenderchecker.h:171 -->
    <object-type name="QgsLayoutChecker"/>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/elevation/qgsabstractprofilegenerator.h:39 -->
    <value-type name="QgsProfileRenderContext"/>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/elevation/qgsabstractprofilegenerator.h:192 -->
    <object-type name="QgsAbstractProfileResults">
        <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/elevation/qgsabstractprofilegenerator.h:201 -->
        <value-type name="Feature"/>
    </object-type>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/elevation/qgsabstractprofilegenerator.h:285 -->
    <value-type name="QgsProfileGenerationContext"/>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/elevation/qgsabstractprofilegenerator.h:415 -->
    <object-type name="QgsAbstractProfileGenerator"/>
    <!-- /home/julien/work/QGIS/.worktrees/qt-for-python-qt6/src/core/elevation/qgsprofilerequest.h:37 -->
    <value-type name="QgsProfileRequest">
        <modify-function signature="expressionContext()" remove="true"/>
    </value-type>
    <enum-type name="SymbolTable"/>
    <enum-type name="TagTable"/>
    <enum-type name="TagmapTable"/>
    <enum-type name="ColorrampTable"/>
    <enum-type name="TextFormatTable"/>
    <enum-type name="LabelSettingsTable"/>
    <enum-type name="SmartgroupTable"/>
</typesystem>
